academic_planner_backend/
├── app/                                # Directorio principal de la aplicación
│   ├── __init__.py
│   ├── api/                            # Módulo de la API
│   │   ├── __init__.py
│   │   └── v1/                         # Versión 1 de la API
│   │       ├── __init__.py
│   │       ├── endpoints/              # Routers/endpoints específicos
│   │       │   ├── __init__.py
│   │       │   ├── auth.py             # Endpoints de autenticación y usuarios
│   │       │   ├── data_masters.py     # Endpoints para datos maestros
│   │       │   ├── planning.py         # Endpoints para planificación y eventos
│   │       │   └── reports.py          # Endpoints para generación de reportes
│   │       └── deps.py                 # Dependencias comunes (ej. obtener usuario actual)
│   ├── core/                           # Configuración, seguridad, etc.
│   │   ├── __init__.py
│   │   ├── config.py                 # Carga de variables de entorno
│   │   └── security.py               # Funciones de hashing, creación/verificación JWT
│   ├── db/                             # Módulo de base deatos
│   │   ├── __init__.py
│   │   ├── base.py                   # Base para modelos SQLAlchemy y sesión
│   │   ├── models/                   # Modelos SQLAlchemy (ORM)
│   │   │   ├── __init__.py
│   │   │   ├── user.py
│   │   │   ├── academic_structure.py # Plan, asignatura, etc.
│   │   │   ├── teacher.py
│   │   │   ├── course_report.py      # Reporte de cursables
│   │   │   └── academic_event.py     # Eventos de planificación
│   │   └── session.py                # Gestión de sesiones de DB
│   ├── schemas/                        # Esquemas Pydantic para validación y serialización
│   │   ├── __init__.py
│   │   ├── token.py
│   │   ├── user.py
│   │   ├── data_master_schemas.py
│   │   ├── planning_schemas.py
│   │   └── msg.py                      # Esquemas para mensajes de respuesta genéricos
│   ├── services/                       # Lógica de negocio (separada de los endpoints)
│   │   ├── __init__.py
│   │   ├── user_service.py
│   │   ├── data_master_service.py
│   │   ├── planning_service.py
│   │   ├── report_service.py
│   │   └── websocket_manager.py      # Gestión de conexiones WebSocket
│   ├── utils/                          # Utilidades generales
│   │   ├── __init__.py
│   │   └── file_processors.py        # Lógica para parsear Excel
│   └── main.py                         # Archivo principal de la aplicación FastAPI
├── alembic/                            # Configuración de Alembic para migraciones de BD
│   ├── README
│   ├── env.py
│   ├── script.py.mako
│   └── versions/
├── tests/                              # Pruebas unitarias e de integración
│   ├── __init__.py
│   ├── conftest.py
│   └── ... (archivos de prueba por módulo)
├── .env                                # Variables de entorno (no versionar)
├── .env.example
├── .gitignore
├── Dockerfile
├── docker-compose.yml
├── alembic.ini
└── requirements.txt